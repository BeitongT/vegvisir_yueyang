syntax = "proto2";

package data;

option java_package = "com.vegvisir.data";
option java_outer_classname = "ProtocolMessageProto";

message Transaction {
    optional string type = 1;
    optional string content = 2;
    optional string comment = 3;
}

message UnsignedBlock {
    optional string user_id = 1;
    optional int64 timestamp = 2;
    optional string location = 3;
    repeated string parent_hashes = 4;
    repeated Transaction transactions = 5;
}

message SignedBlock {
    optional UnsignedBlock unsigned_block = 1;
    optional string signature = 2;
}

message Filter{
	required int32 radix=1;
	repeated int64 value=2;
}

message GetRemoteRootBlockResponse {
    optional SignedBlock remote_root_block = 1;
    optional bool failed_to_retrieve = 2;
}

message GetRemoteBlocksResponse {
    repeated SignedBlock remote_blocks = 1;
    optional bool failed_to_retrieve = 2;
	optional bool in_stream=3;
}

message GetRemoteProofOfWitnessBlockResponse {
    optional SignedBlock remote_proof_of_witness_block = 1;
}

message GetRemoteTimestampResponse {
    optional int64 remote_timestamp = 1;
}

message GetRemoteBlocksRequest {
    repeated string crypto_hashes = 1;
}

message GetRemoteProofOfWitnessBlockRequest {
    repeated string parent_hashes = 1;
}

message StreamRequest {
	required Filter filter=1;
}


message SetOnUpdateRequest {
	required bool target=1;
}

message SetOnUpdateResponse {
	required bool result=1;
}

message NewlyAddedBlock {
	required string block_hash=1;
}

message TestRemoteBlockRequest {
	repeated string block_hashes=1;
}

message TestRemoteBlockResponse {
	repeated string block_hashes=1;
}

	
message ProtocolMessage {
    enum MessageType {
        GET_REMOTE_ROOT_BLOCK_RESPONSE = 0;
        GET_REMOTE_BLOCKS_RESPONSE = 1;
        GET_REMOTE_PROOF_OF_WITNESS_BLOCK_RESPONSE = 2;
        GET_REMOTE_TIMESTAMP_RESPONSE = 3;
        GET_REMOTE_ROOT_BLOCK_REQUEST = 4;
        GET_REMOTE_BLOCKS_REQUEST = 5;
        GET_REMOTE_PROOF_OF_WITNESS_BLOCK_REQUEST = 6;
        GET_REMOTE_TIMESTAMP_REQUEST = 7;
        MERGE_COMPLETE = 8;
        MERGE_COMPLETE_ACK = 9;
        MERGE_INTERRUPTED = 10;
		SET_ON_UPDATE_REQUEST = 11;
		SET_ON_UPDATE_RESPONSE = 12;
		NEWLY_ADDED_BLOCK = 13;
		START_STREAM=14;
		GET_FILE = 15;
		GET_STREAM=16;
    }
    required MessageType type = 1;
	optional int64 fromId=12;
	optional int64 toId=13;

    oneof body {
        GetRemoteRootBlockResponse get_remote_root_block_response = 2;
        GetRemoteBlocksResponse get_remote_blocks_response = 3;
        GetRemoteProofOfWitnessBlockResponse get_remote_proof_of_witness_block_response = 4;
        GetRemoteTimestampResponse get_remote_timestamp_response = 5;
        GetRemoteBlocksRequest get_remote_blocks_request = 6;
        GetRemoteProofOfWitnessBlockRequest get_remote_proof_of_witness_block_request = 7;
		SetOnUpdateRequest set_on_update_request = 8;
		SetOnUpdateResponse set_on_update_response = 9;
		NewlyAddedBlock newly_added_block = 10;
		StreamRequest stream_request=11;
        bool no_body = 20;
    }
}

